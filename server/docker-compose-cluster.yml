name: agitg-server

services:

  artemis-edm:
    image: apache/activemq-artemis:2.36.0
    container_name: artemis-edm
    restart: always
    volumes:
      - ./server/artemis/node0:/var/lib/artemis-instance
    environment:
      ENABLE_JMX_EXPORTER: "true"
      ARTEMIS_MIN_MEMORY: "512M"
      ARTEMIS_MAX_MEMORY: "2000M"
      ARTEMIS_USER: "admin"
      ARTEMIS_PASSWORD: "U6AKsqJNdUaRuFLBeeQv"
    ports:
      - "8161:8161"
      - "61616:61616"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 1g

  redis-master1:
    container_name: redis-master1
    hostname: redis-master1
    restart: always
    build:
        context: redis-replica/redis
    volumes:
        - ./data/node1:/data
    ports: 
        - 7001:7001
        - 17001:17001
    entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7001", --cluster-announce-ip, "${ip}"]
    
  redis-master2:
      container_name: redis-master2
      hostname: redis-master2
      restart: always
      build:
          context: redis-replica/redis 
      volumes:
          - ./data/node2:/data
      ports: 
          - 7002:7002 
          - 17002:17002
      entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7002", --cluster-announce-ip, "${ip}"]

  redis-master3:
      container_name: redis-master3
      hostname: redis-master3
      restart: always
      build:
          context: redis-replica/redis 
      volumes:
          - ./data/node3:/data
      ports: 
          - 7003:7003 
          - 17003:17003
      entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7003", --cluster-announce-ip ,"${ip}"]

  redis-slave1:
      container_name: redis-slave1
      hostname: redis-slave1
      restart: always
      build:
          context: redis-replica/redis 
      volumes:
          - ./data/node4:/data
      ports: 
          - 7004:7004
          - 17004:17004
      depends_on:
        - redis-master1
      entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7004", --cluster-announce-ip ,"${ip}"]
      # command: redis-server --slaveof redis-master1 7000

  redis-slave2:
      container_name: redis-slave2
      hostname: redis-slave2
      restart: always
      build:
          context: redis-replica/redis 
      volumes:
          - ./data/node5:/data
      ports: 
          - 7005:7005
          - 17005:17005 
      depends_on:
        - redis-master2
      entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7005", --cluster-announce-ip ,"${ip}"]
      # command: redis-server --slaveof redis-master2 7001

  redis-slave3:
      container_name: redis-slave3
      hostname: redis-slave3
      restart: always
      build:
          context: redis-replica/redis 
      volumes:
          - ./data/node6:/data
      ports: 
          - 7006:7006
          - 17006:17006 
      depends_on:
        - redis-master3
      entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port, "7006", --cluster-announce-ip , "${ip}"]
      # command: redis-server --slaveof redis-master3 7002

  redis-cluster-creator:
      container_name: redis-cluster-creator
      image: redis
      entrypoint: [/bin/sh,-c,'echo "yes" | redis-cli --cluster create ${ip}:7001 ${ip}:7002 ${ip}:7003 ${ip}:7004 ${ip}:7005 ${ip}:7006 --cluster-replicas 1']
      depends_on: 
        - redis-master1 
        - redis-master2
        - redis-master3 
        - redis-slave1
        - redis-slave2
        - redis-slave3

  redis-sentinel1:
      container_name: redis-sentinel1
      build: redis-replica/sentinel
      depends_on:
        - redis-master1
        - redis-master2
        - redis-master3

  redis-sentinel2:
      container_name: redis-sentinel2
      build: redis-replica/sentinel
      depends_on:
        - redis-master1
        - redis-master2
        - redis-master3

  redis-sentinel3:
      container_name: redis-sentinel3
      build: redis-replica/sentinel
      depends_on:
        - redis-master1
        - redis-master2
        - redis-master3

  consul1:
    image: consul:1.15.4
    container_name: consul-node1
    hostname: node1
    restart: always
    command: agent -server -bootstrap-expect=3 -node=node1 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1

  consul2:
    image: consul:1.15.4
    container_name: consul-node2
    hostname: node2
    restart: always
    command: agent -server -retry-join=node1 -node=node2 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    depends_on:
        - consul1

  consul3:
    image: consul:1.15.4
    container_name: consul-node3
    hostname: node3
    restart: always
    command: agent -server -retry-join=node1 -node=node3 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    depends_on:
        - consul1

  consul4:
    image: consul:1.15.4
    container_name: consul-node4
    hostname: node4
    restart: always
    command: agent -retry-join=node1 -node=ndoe4 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1 -ui 
    ports:
      - 8500:8500
      - "8600:8600/udp"
    depends_on:
        - consul2
        - consul3